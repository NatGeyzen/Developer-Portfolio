import React from 'react';
import './LessonsLearned.css';

const LessonsLearned = props => {
    return (
        <article className={props.slideClass}>
            <div className="post-category">Lessons Learned</div>
            <h1 className="post-title">The One Where I REALLY Learned The Meaning Of Clean, Reusable Code</h1>
            <div className="post-intro">
                <p> When learning a programming language, re-usability and writing clean code are topics that will likely come up often. Don't Repeat Yourself - or DRY - seems so simple, but there's a difference between understanding a concept and really, truly grasping it. I didn't realize I had not in fact fully grasped this until I got myself into a big old mess, or at least my code did. I was playing around with an animation library I had not previously used before to create an interactive mind map of sorts. There are a lot of moving parts and therefore a good amount of accompanying code. I was getting so caught up in the details, I was making a rookie mistake: copy pasting and just changing values here and there. All the while I was thinking "I'll clean it up later". And so my file kept growing bigger and more complicated. Until one day I wanted to change some values and I couldn't find where I put them. We've all probably been there at some point or another. But it was in that moment of frustration, that things just started to 'click'. </p>
            </div>
            <h2 className="post-subtitle">Nat's How To: Emergency Code Clean Up</h2>
            <p className="post-text">There are many different ways to approach this. Some may work for you, others may not. The following is simply a reflection of the process I went through to clean up my code and what I took away from it. </p>
            <h3 className="tier3-title">Analyze</h3>
            <p className="post-text">Focus on one problem file and analyze your code. What is it doing? How is it achieving that? A great technique is to talk it through out loud like you're explaining it to someone who has no or limited knowledge on programming. Narrow down the description to preferably one sentence, using human understandable language, not programming terms. If the explanation seems long or overly complicated, it means the code likely is too. Which brings us to step 2.</p>
            <h3 className="tier3-title">Separate</h3>
            <p className="post-text">Separate code that does not share the same focus. If some of your code can be explained in that one sentence, but some of it doesn't seem to fit that description, then separate it. If the code blocks for each focus point will likely be long, then they can be placed in individual files. Otherwise, functions can be used to create distinct units of code.</p>
            <h3 className="tier3-title">Group</h3>
            <p className="post-text">Group code together by type. Avoid sprinkling variable declarations between chunks of logic. Instead, group any similar code, such as variables, functions, import/require statements, ... in the same place. The latter should, if there are any, be placed at the top of the file, then variable declarations and lastly functions. Of course this only applies if two or all of those can be placed in a single file without it becoming too large. Otherwise again, place it in its own separate file. It might look like a lot of files and it might be, but if most of those files contain 100+ lines of code, separation will make managing everything much easier. </p>
            <p className="post-text">Group types by sub type if possible. For variables for example, this could be let vs const variables, arrays, objects, strings, ... Functions can be grouped in a variety of ways, functions that all require an id as a parameter  or functions that perform the same kind of action in different ways for example. Generally speaking, anything that they have in common can be used as a reason to group functions together. Keep in mind though, the goal here is to make the code easier to maintain and keep related code together. So think about what you might possibly want to change or need to find inside your code in the future. How would you go about finding it? In a search engine, you would look for specific keywords, so apply that same principle here. As a matter of fact, code editors do actually allow you to look for something in your files. But you have to know what you're looking for. </p>
            <p className="post-text">Then do it all over again. Or at least, sort of. Coding is a process. </p>
            <h3 className="tier3-title">Bonus: The Naming Game</h3>
            <p className="post-text">As easy as it is to get lazy with naming, it's much easier to locate specific code if naming is done right. This starts in the project itself, with folder and file names. The only hard rule in my opinion is to make sure that anyone else or even future you know with a quick glance what kind of file(s) or code can be expected. To give an example from one of my personal projects, there is a folder called 'SVG' which holds a file 'svg_animation_functions.js'. Both are pretty self-explanatory, with the file name not only specifying the type of code (functions), but also their collective focus (animating svg elements) . Speaking of functions and variables for that matter, the same rule applies: be as clear as possible. Especially in larger files with many different types of variables, something as simple as specifying it is an array inside the variable name can be extremely helpful.</p>
            <p className="post-text">Another great tip on naming is to try to stick to natural language as much as possible. For functions names, start with a verb representing the core of the function, then specify, for example 'animateOpacityToZero' (which closely resembles the human description ' it animates an opacity transition to 0', just slightly shorter). For Boolean variables, this can be achieved by starting the variable name with 'is' or 'has' (for example 'isInitialMap'). This is actually a widely accepted practice, and not just a me tip by the way.</p>
            <p className="post-text">Now personally, I generally speaking like to use underscores in my variable names and camelCase in my function names. The only reason for this is because it makes it even easier and faster to differentiate between variables and functions. The only exception to that is the Boolean variables mentioned earlier. Because they so closely resemble the way function naming is structured and because they are usually fairly short names, I use camelCase for those (like in the example above). </p>
            <footer className="article-footer">
                <div className="footer-divider">&copy;2020 Nat Geyzen</div>
            </footer>
        </article>
    )
};

export default LessonsLearned;